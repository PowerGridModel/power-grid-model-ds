# SPDX-FileCopyrightText: Contributors to the Power Grid Model project <powergridmodel@lfenergy.org>
#
# SPDX-License-Identifier: MPL-2.0


name: Build, Test and Release

on:
  # run pipeline from another workflow
  workflow_call:
    inputs:
      create_release:
        type: boolean
        description: Create a (pre-)release when CI passes
        default: false
        required: false
      update_dependencies:
        type: boolean
        description: Update dependencies to their latest version
        default: false
        required: false
    outputs:
      tag:
        description: "The created release tag"
        value: ${{ jobs.github-release.outputs.tag }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-main
  cancel-in-progress: true

jobs:
  build-python:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:

      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        if: ${{ always() }}
        with:
            activate-environment: true
            enable-cache: true
    
      - name: Install dependencies
        if: ${{ always() }}
        run: uv sync

      - name: Update dependencies
        if: ${{ inputs.update_dependencies }}
        run: uv update

      - name: Set PyPI version
        uses: PowerGridModel/pgm-version-bump@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Save version
        id: version
        run: echo "version=$(cat PYPI_VERSION)" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          uv build
        
      - name: Store built wheel file
        uses: actions/upload-artifact@v4
        with:
          name: power-grid-model-ds
          path: dist/

  tests:
    needs: build-python
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python: ["3.11", "3.12", "3.13"]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        if: ${{ always() }}
        with:
          activate-environment: true
          enable-cache: true

      - name: install poe
        run: uv tool install poethepoet

      - name: Load built wheel file
        uses: actions/download-artifact@v4
        with:
          name: power-grid-model-ds
          path: dist/

      - name: Install built wheel file
        run: uv pip install power-grid-model-ds[dev]==${{ needs.build-python.outputs.version }} --find-links=dist

      - name: Run Code Quality Checks & Tests
        run: poe all --check
      

  github-release:
    if: ${{ inputs.create_release == 'true' }}
    needs:
      - build-python
      - tests
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v5

      - name: Load built wheel file
        uses: actions/download-artifact@v4
        with:
          name: power-grid-model-ds
          path: dist/

      - name: Prevent automatic major/minor release
        if: (github.event_name == 'push')
        run: |
          echo "Fetching the latest release..."
          tag=$(gh release view --json tagName --jq '.tagName')
          tag=${tag#v}  # Remove the leading 'v'
          major_minor=$(echo "$tag" | cut -d. -f1,2)
          version_file=$(cat VERSION)

          if [ "$major_minor" = "$version_file" ]; then
            echo "Patch release detected. Proceeding with automatic release."
          else
            echo "Cannot automatically release a new major/minor version. Please trigger manually if desired."
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tag
        id: tag
        run: echo "tag=v${{ needs.build-python.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Display tag
        run: echo "${{ steps.tag.outputs.tag }}"

      - name: Release
        if: (inputs.create_release)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./dist/*
          tag_name: ${{ steps.tag.outputs.tag }}
          prerelease: ${{github.ref != 'refs/heads/main'}}
          generate_release_notes: true
          target_commitish: ${{ github.sha }}
